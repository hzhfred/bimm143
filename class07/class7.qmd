---
title: "class07"
author: "Ziheng Huang"
format: html
---

Test data:

```{r}
tmp <- c(rnorm(30,-3),rnorm(30,3))
x <- cbind(x=tmp,y=rev(tmp))
plot(x)


```

**K-means Clustering**

kmeans()

```{r}
km <- kmeans(x,centers=2,nstart=20)
km
```

Q: points in cluster

```{r}
km$size
```

Q: cluster assignment, center

```{r}
km$cluster
km$centers
```

Q: plot clusters, centers

```{r}
plot(x,col=km$cluster)
points(km$centers,col='blue',pch=15)
```

hclust()

```{r}
hc <- hclust(dist(x))
```

plot() for hc

```{r}
plot(hc)
```

get cluster groupings for hc, cut the tree with height

```{r}
cutree(hc,h=8)
```

use cutree with k=2

```{r}
grps <- cutree(hc,k=2)
```

plot

```{r}
plot(x,col=grps)
```

# 1. PCA of UK food data

load data

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
```

Q1: rows/cols

```{r}
dim(x)
```

fixed row/col num

```{r}
x <- read.csv(url, row.names=1)
head(x)
```

Q2: Which approach to solving the 'row-names problem' mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I like the second approach. first approach is a hack.

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```

**Q3**: Changing what optional argument in the above **barplot()** function results in the following plot?

```{r}
barplot(as.matrix(x), beside=FALSE, col=rainbow(nrow(x)))
```

**Q5**: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col=rainbow(10), pch=16)
```

lying on diagonal means the two values are same

**Q6**. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

little fruit, lots of potato

PCA starts here

```{r}
pca <- prcomp( t(x) )
summary(pca)
```

**Q7**. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```

**Q8.** Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x),col=c('orange','red','blue','darkgreen'))
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")

```

Variable loading: PCA1

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```

Q9: Variable loading: PCA2

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```

Biplot:

```{r}
biplot(pca)
```

# 2. PCA of RNA-seq data

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

Q10: How many genes and samples are in this data set? 100 gene, 10 samples

```{r}
dim(rna.data)
```

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```

```{r}
plot(pca, main="Quick scree plot")
```

```{r}
## Variance captured per PC 
pca.var <- pca$sdev^2

## Percent variance is often more informative to look at 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```

```{r}
## A vector of colors for wt and ko samples
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))
```

Plot with GGPLOT:

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()
```

### Gene loadings

```{r}
loading_scores <- pca$rotation[,1]

## Find the top 10 measurements (genes) that contribute
## most to PC1 in either direction (+ or -)
gene_scores <- abs(loading_scores) 
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)

## show the names of the top 10 genes
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes 
```
